/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package VistaCajero;

import Funciones.clsBD_Conexion;
import Vista.Login;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import javax.mail.PasswordAuthentication;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;


/**
 *
 * @author yael
 */
public class Pagar extends javax.swing.JPanel {

    /**
     * Creates new form Pagar
     */
    public Pagar() {
        initComponents();
        label.setText(obtenerFechaActual());
    }
    public String obtenerFechaActual() {
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    return sdf.format(new Date());
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtFactura = new javax.swing.JComboBox<>();
        txtCorreo = new javax.swing.JTextField();
        txtImporte = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        txtDescripcion = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        label = new javax.swing.JLabel();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Pagar");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, -1, -1));

        jButton1.setBackground(new java.awt.Color(204, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, -1, -1));

        jButton2.setBackground(new java.awt.Color(0, 153, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, -1, -1));

        jButton3.setBackground(new java.awt.Color(204, 204, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("Limpiar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, -1, -1));

        jLabel4.setText("Tipo de factura");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, -1, -1));

        txtFactura.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Luz", "Agua ", "Telefono ", "Internet", " " }));
        jPanel2.add(txtFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 190, -1));

        txtCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCorreoActionPerformed(evt);
            }
        });
        jPanel2.add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 230, 190, -1));

        txtImporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImporteActionPerformed(evt);
            }
        });
        jPanel2.add(txtImporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 190, -1));

        jLabel6.setText("Importe");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, -1, -1));

        jLabel7.setText("Correo");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, -1, -1));

        jButton4.setBackground(new java.awt.Color(0, 102, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setText("Comprobante");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 400, -1, -1));

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        jPanel2.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 190, -1));

        jLabel8.setText("Descripcion");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, -1, -1));
        jPanel2.add(label, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 180, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
  // Validar que los campos necesarios estén llenos
    if (txtImporte.getText().isEmpty() || txtFactura.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Reemplazar comas por puntos y limpiar espacios adicionales
    String importeTexto = txtImporte.getText().replace(',', '.').trim();
    System.out.println("Importe recibido: [" + importeTexto + "]"); // Log para depuración

    // Validar el formato usando una expresión regular
    if (!importeTexto.matches("^\\d+(\\.\\d{1,2})?$")) { // Permite hasta 2 decimales
        JOptionPane.showMessageDialog(this, "El importe debe ser un número válido (formato: 123.45)", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Convertir el importe a BigDecimal
        BigDecimal importe = new BigDecimal(importeTexto);

        // Obtener datos adicionales
        String servicio = txtFactura.getSelectedItem().toString();
        String numeroTarjeta = Login.getNumeroTarjetaLogueada();

        // Conectar a la base de datos
        clsBD_Conexion conexion = new clsBD_Conexion();
        conexion.conectarBD();

        // Verificar si existe un movimiento de tipo 'PAGAR' con el importe correspondiente
        String checkMovQuery = "SELECT idmovimiento, saldo FROM movimiento WHERE numero_tarjeta = ? AND tipo_movimiento = 'PAGAR' AND saldo = ? ORDER BY fecha DESC LIMIT 1";
        PreparedStatement pstCheckMov = conexion.getConexion().prepareStatement(checkMovQuery);
        pstCheckMov.setLong(1, Long.parseLong(numeroTarjeta));
        pstCheckMov.setBigDecimal(2, importe);
        ResultSet rsMov = pstCheckMov.executeQuery();

        if (rsMov.next()) {
            int idMovimiento = rsMov.getInt("idmovimiento");
            
            // Obtener el saldo del movimiento
            BigDecimal saldoMovimiento = rsMov.getBigDecimal("saldo");

            // Actualizar el saldo del cliente, sumando el monto del pago
            String updateSaldoQuery = "UPDATE cliente SET saldo = saldo + ? WHERE tarjeta_id = (SELECT idtarjeta FROM tarjeta WHERE numero_tarjeta = ?)";
            PreparedStatement pstUpdateSaldo = conexion.getConexion().prepareStatement(updateSaldoQuery);
            pstUpdateSaldo.setBigDecimal(1, saldoMovimiento);
            pstUpdateSaldo.setLong(2, Long.parseLong(numeroTarjeta));
            pstUpdateSaldo.executeUpdate();

            // Eliminar el movimiento de la tabla 'movimiento'
            String deleteMovQuery = "DELETE FROM movimiento WHERE idmovimiento = ?";
            PreparedStatement pstDeleteMov = conexion.getConexion().prepareStatement(deleteMovQuery);
            pstDeleteMov.setInt(1, idMovimiento);
            pstDeleteMov.executeUpdate();

            // Confirmación al usuario
            JOptionPane.showMessageDialog(this, "Pago cancelado y saldo devuelto exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró un pago correspondiente para cancelar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    txtFactura.setSelectedIndex(0);
    txtImporte.setText("");
    txtCorreo.setText("");   
    txtDescripcion.setText("");// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        generarPDF();   // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// Validar que los campos necesarios estén llenos
    if (txtImporte.getText().isEmpty() || txtFactura.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Reemplazar comas por puntos y limpiar espacios adicionales
    String importeTexto = txtImporte.getText().replace(',', '.').trim();
    System.out.println("Importe recibido: [" + importeTexto + "]"); // Log para depuración

    // Validar el formato usando una expresión regular
    if (!importeTexto.matches("^\\d+(\\.\\d{1,2})?$")) { // Permite hasta 2 decimales
        JOptionPane.showMessageDialog(this, "El importe debe ser un número válido (formato: 123.45)", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Convertir el importe a BigDecimal
        BigDecimal importe = new BigDecimal(importeTexto);


        // Obtener datos adicionales
        String servicio = txtFactura.getSelectedItem().toString();
        String numeroTarjeta = Login.getNumeroTarjetaLogueada();

        // Conectar a la base de datos
        clsBD_Conexion conexion = new clsBD_Conexion();
        conexion.conectarBD();

        // Verificar saldo actual
        String checkSaldoQuery = "SELECT saldo FROM cliente WHERE tarjeta_id = (SELECT idtarjeta FROM tarjeta WHERE numero_tarjeta = ?)";
        PreparedStatement pstCheckSaldo = conexion.getConexion().prepareStatement(checkSaldoQuery);
        pstCheckSaldo.setLong(1, Long.parseLong(numeroTarjeta));
        ResultSet rsSaldo = pstCheckSaldo.executeQuery();

        BigDecimal saldoActual = BigDecimal.ZERO;
        if (rsSaldo.next()) {
            saldoActual = rsSaldo.getBigDecimal("saldo");
            if (saldoActual.compareTo(importe) < 0) {
                JOptionPane.showMessageDialog(this, "Saldo insuficiente para realizar el pago", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la tarjeta asociada al cliente", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Actualizar el saldo del cliente
        String updateSaldoQuery = "UPDATE cliente SET saldo = saldo - ? WHERE tarjeta_id = (SELECT idtarjeta FROM tarjeta WHERE numero_tarjeta = ?)";
        PreparedStatement pstUpdateSaldo = conexion.getConexion().prepareStatement(updateSaldoQuery);
        pstUpdateSaldo.setBigDecimal(1, importe);
        pstUpdateSaldo.setLong(2, Long.parseLong(numeroTarjeta));

        int filasActualizadas = pstUpdateSaldo.executeUpdate();
        if (filasActualizadas > 0) {
            // Insertar movimiento en la tabla
            String insertMovimientoQuery = "INSERT INTO movimiento (fecha, numero_tarjeta, tipo_movimiento, saldo) VALUES (NOW(), ?, 'PAGAR', ?)";
            PreparedStatement pstInsertMov = conexion.getConexion().prepareStatement(insertMovimientoQuery);
            pstInsertMov.setLong(1, Long.parseLong(numeroTarjeta));
            pstInsertMov.setBigDecimal(2, importe);

            int filasMovimientos = pstInsertMov.executeUpdate();
            if (filasMovimientos > 0) {
                JOptionPane.showMessageDialog(this, "Pago realizado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo registrar el movimiento en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el saldo del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtImporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImporteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImporteActionPerformed
private void generarPDF() {
    // Validar que los campos no estén vacíos
    if (txtFactura.getSelectedItem() == null || txtImporte.getText().trim().isEmpty() || txtCorreo.getText().trim().isEmpty()||txtDescripcion.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                "Por favor, complete todos los campos antes de generar el comprobante.");
        return;
    }

    // Crear un documento con dimensiones de ticket (80 mm de ancho por 200 mm de alto)
    Document documento = new Document(new Rectangle(226, 700));
    documento.setMargins(10, 10, 10, 10); // Márgenes ajustados
    String ruta = "ticket_Pago.pdf";

    try {
        // Configurar el escritor para el PDF
        PdfWriter.getInstance(documento, new FileOutputStream(ruta));

        // Abrir el documento
        documento.open();

        // Agregar una imagen al inicio
        try {
            Image imagen = Image.getInstance(getClass().getResource("/Imagenes/Logo.png"));
            imagen.setAlignment(Image.ALIGN_CENTER);
            imagen.scaleToFit(150, 150); // Escalar imagen al tamaño deseado
            documento.add(imagen);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                    "Error al cargar la imagen: " + e.getMessage());
        }

        // Agregar contenido al PDF con formato de ticket
        Font fontTitulo = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);
        Font fontNormal = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);
        Font fontDetalle = new Font(Font.FontFamily.COURIER, 8, Font.NORMAL);

        Paragraph titulo = new Paragraph("\n--- PAGO DE SERVICIO ---\n", fontTitulo);
        titulo.setAlignment(Element.ALIGN_CENTER);
        documento.add(titulo);

        documento.add(new Paragraph("\n-------------------------------------", fontDetalle));
        documento.add(new Paragraph("Tipo de factura: \n" + txtFactura.getSelectedItem(), fontNormal));
        documento.add(new Paragraph("Importe: \n$ " + txtImporte.getText(), fontNormal));
        documento.add(new Paragraph("Correo: \n" + txtCorreo.getText(), fontNormal));
        documento.add(new Paragraph("Descripcion: \n" + txtDescripcion.getText(), fontNormal));
        documento.add(new Paragraph("-------------------------------------\n", fontDetalle));

        Paragraph mensaje = new Paragraph("Gracias por su confianza.\n", fontNormal);
        mensaje.setAlignment(Element.ALIGN_CENTER);
        documento.add(mensaje);

        documento.add(new Paragraph("\nFecha: " + java.time.LocalDateTime.now(), fontDetalle));

        // Mostrar mensaje de confirmación
        JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                "PDF generado con éxito en: " + ruta);

        // Intentar abrir el archivo PDF generado
        try {
            Desktop.getDesktop().open(new File(ruta));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                    "No se pudo abrir el archivo generado: " + e.getMessage());
        }

    } catch (DocumentException | IOException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                "Error al generar el PDF: " + ex.getMessage());
    } finally {
        // Cerrar el documento correctamente
        if (documento.isOpen()) {
            documento.close();
        }
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel label;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JComboBox<String> txtFactura;
    private javax.swing.JTextField txtImporte;
    // End of variables declaration//GEN-END:variables
}
