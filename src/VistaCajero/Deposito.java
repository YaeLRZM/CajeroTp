/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package VistaCajero;

import Funciones.*;
import Vista.MenuModificado;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import javax.mail.PasswordAuthentication;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author yael
 */
public class Deposito extends javax.swing.JPanel {
private MenuModificado menuModificado;
    /**
     * Creates new form Deposito
     */
    public Deposito() {
        initComponents();
        label.setText(obtenerFechaActual());
    }
    public Deposito(MenuModificado menuModificado) {
    initComponents();
    this.menuModificado = menuModificado;
    label.setText(obtenerFechaActual());// Guardar la referencia
}
    public String obtenerFechaActual() {
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    return sdf.format(new Date());
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtCorreo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        txtNumeroCuenta = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Deposito ");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 130, -1, -1));

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        jPanel2.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 250, 190, -1));

        txtCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadActionPerformed(evt);
            }
        });
        jPanel2.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 250, 190, -1));

        jLabel6.setText("Cantidad ");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, -1, -1));

        jLabel7.setText("Descripcion");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 230, -1, -1));

        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setText("*Nota: Solo se puede depositar acuentas BBVA");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, -1, -1));

        jButton1.setBackground(new java.awt.Color(204, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 350, -1, -1));

        jButton2.setBackground(new java.awt.Color(0, 153, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 350, -1, -1));

        jButton3.setBackground(new java.awt.Color(204, 204, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("Limpiar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 350, -1, -1));

        jButton4.setBackground(new java.awt.Color(0, 102, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setText("Comprobante");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 400, -1, -1));

        txtCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCorreoActionPerformed(evt);
            }
        });
        jPanel2.add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, 190, -1));

        jLabel8.setText("Correo");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 290, -1, -1));
        jPanel2.add(label, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 200, 30));

        txtNumeroCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroCuentaActionPerformed(evt);
            }
        });
        jPanel2.add(txtNumeroCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 310, 190, -1));

        jLabel9.setText("Numero de cuenta");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 480));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
     generarPDF();   // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    txtCantidad.setText("");
    txtCorreo.setText("");
    txtDescripcion.setText("");    
    txtNumeroCuenta.setText("");  // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // Validar que los campos necesarios estén llenos
    if (txtCantidad.getText().isEmpty() || txtNumeroCuenta.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Validar que txtCantidad contenga solo números
    if (!txtCantidad.getText().matches("\\d+(\\.\\d+)?")) {
        JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar que txtNumeroCuenta contenga exactamente 16 dígitos
    if (!txtNumeroCuenta.getText().matches("\\d{16}")) {
        JOptionPane.showMessageDialog(this, "El número de cuenta debe contener exactamente 16 dígitos", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        double cantidad = Double.parseDouble(txtCantidad.getText());
        String numeroTarjeta = txtNumeroCuenta.getText();

        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        clsBD_Conexion conexion = new clsBD_Conexion();
        conexion.conectarBD();

        // Validar que el número de tarjeta exista
        String verificarTarjetaQuery = "SELECT COUNT(*) FROM tarjeta WHERE numero_tarjeta = ?";
        PreparedStatement pstVerificarTarjeta = conexion.getConexion().prepareStatement(verificarTarjetaQuery);
        pstVerificarTarjeta.setLong(1, Long.parseLong(numeroTarjeta));
        ResultSet rsTarjeta = pstVerificarTarjeta.executeQuery();

        if (rsTarjeta.next() && rsTarjeta.getInt(1) == 0) {
            JOptionPane.showMessageDialog(this, "El número de tarjeta no existe", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Buscar el último movimiento de tipo 'DEPOSITO'
        String getMovimientoQuery = "SELECT idmovimiento, saldo FROM movimiento WHERE numero_tarjeta = ? AND tipo_movimiento = 'DEPOSITO' ORDER BY fecha DESC LIMIT 1";
        PreparedStatement pstMovimientoQuery = conexion.getConexion().prepareStatement(getMovimientoQuery);
        pstMovimientoQuery.setLong(1, Long.parseLong(numeroTarjeta));
        ResultSet rsMovimiento = pstMovimientoQuery.executeQuery();

        if (rsMovimiento.next()) {
            int idMovimiento = rsMovimiento.getInt("idmovimiento");

            // Quitar saldo de la tabla cliente
            String updateSaldoQuery = "UPDATE cliente SET saldo = saldo - ? WHERE tarjeta_id = (SELECT idtarjeta FROM tarjeta WHERE numero_tarjeta = ?)";
            PreparedStatement pstUpdateSaldo = conexion.getConexion().prepareStatement(updateSaldoQuery);
            pstUpdateSaldo.setDouble(1, cantidad);
            pstUpdateSaldo.setLong(2, Long.parseLong(numeroTarjeta));
            pstUpdateSaldo.executeUpdate();

            // Eliminar el movimiento de la tabla de movimientos
            String deleteMovQuery = "DELETE FROM movimiento WHERE idmovimiento = ?";
            PreparedStatement pstDeleteMov = conexion.getConexion().prepareStatement(deleteMovQuery);
            pstDeleteMov.setInt(1, idMovimiento);
            pstDeleteMov.executeUpdate();

            // Confirmación al usuario
            JOptionPane.showMessageDialog(this, "Depósito cancelado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Mensaje si no se encuentra un depósito correspondiente
            JOptionPane.showMessageDialog(this, "No se encontró un depósito correspondiente para cancelar", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Cantidad inválida, debe ser un número", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error de conexión con la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void txtNumeroCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroCuentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroCuentaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 if (txtCantidad.getText().isEmpty() || txtNumeroCuenta.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Validar que txtCantidad contenga solo números
    if (!txtCantidad.getText().matches("\\d+(\\.\\d+)?")) {
        JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar que txtNumeroCuenta contenga exactamente 16 dígitos
    if (!txtNumeroCuenta.getText().matches("\\d{16}")) {
        JOptionPane.showMessageDialog(this, "El número de cuenta debe contener exactamente 16 dígitos", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        double cantidad = Double.parseDouble(txtCantidad.getText());
        String numeroTarjeta = txtNumeroCuenta.getText();

        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        clsBD_Conexion conexion = new clsBD_Conexion();
        conexion.conectarBD();

        // Validar que el número de tarjeta exista
        String verificarTarjetaQuery = "SELECT COUNT(*) FROM tarjeta WHERE numero_tarjeta = ?";
        PreparedStatement pstVerificarTarjeta = conexion.getConexion().prepareStatement(verificarTarjetaQuery);
        pstVerificarTarjeta.setLong(1, Long.parseLong(numeroTarjeta));
        ResultSet rsTarjeta = pstVerificarTarjeta.executeQuery();

        if (rsTarjeta.next() && rsTarjeta.getInt(1) == 0) {
            JOptionPane.showMessageDialog(this, "El número de tarjeta no existe", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Generar nuevo ID para movimientos
        String getMaxIdQuery = "SELECT IFNULL(MAX(idmovimiento), 0) + 1 FROM movimiento";
        Statement stmt = conexion.getConexion().createStatement();
        ResultSet rs = stmt.executeQuery(getMaxIdQuery);
        int nuevoId = 0;
        if (rs.next()) {
            nuevoId = rs.getInt(1);
        }

        // Registrar transacción en movimientos
        String insertMovimiento = "INSERT INTO movimiento (idmovimiento, fecha, numero_tarjeta, tipo_movimiento, saldo) VALUES (?, CURDATE(), ?, 'DEPOSITO', ?)";
        PreparedStatement pstMovimiento = conexion.getConexion().prepareStatement(insertMovimiento);
        pstMovimiento.setInt(1, nuevoId);
        pstMovimiento.setLong(2, Long.parseLong(numeroTarjeta));
        pstMovimiento.setDouble(3, cantidad);
        int filasMovimientos = pstMovimiento.executeUpdate();

        if (filasMovimientos > 0) {
            // Actualizar saldo en cliente
            String queryActualizarSaldo = "UPDATE cliente SET saldo = saldo + ? WHERE tarjeta_id = (SELECT idtarjeta FROM tarjeta WHERE numero_tarjeta = ?)";
            PreparedStatement pstActualizarSaldo = conexion.getConexion().prepareStatement(queryActualizarSaldo);
            pstActualizarSaldo.setDouble(1, cantidad);
            pstActualizarSaldo.setLong(2, Long.parseLong(numeroTarjeta));
            int filasCliente = pstActualizarSaldo.executeUpdate();

            if (filasCliente > 0) {
                JOptionPane.showMessageDialog(this, "Depósito realizado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo actualizar el saldo del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo registrar el movimiento en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Cantidad inválida, debe ser un número", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error de conexión con la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed
private void generarPDF() {
    // Validar que los campos no estén vacíos
    if (txtCantidad.getText().trim().isEmpty() || txtCorreo.getText().trim().isEmpty() || txtDescripcion.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                "Por favor, complete todos los campos antes de generar el comprobante.");
        return;
    }

    // Crear un documento con tamaño personalizado (80mm x 200mm)
    float anchoTicket = 80f * 2.83465f; // Conversión de mm a puntos (1 mm = 2.83465 puntos)
    float altoTicket = 200f * 2.83465f;
    Document documento = new Document(new Rectangle(anchoTicket, altoTicket));
    String ruta = "ticket_deposito.pdf";

    try {
        // Configurar el escritor para el PDF
        PdfWriter writer = PdfWriter.getInstance(documento, new FileOutputStream(ruta));

        // Abrir el documento
        documento.open();

        // Agregar una imagen al inicio
        try {
            Image imagen = Image.getInstance(getClass().getResource("/Imagenes/Logo.png"));
            imagen.setAlignment(Image.ALIGN_CENTER);
            imagen.scaleToFit(anchoTicket - 20, 100); // Ajustar la imagen al ancho del ticket
            documento.add(imagen);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                    "Error al cargar la imagen: " + e.getMessage());
        }

        // Agregar contenido al PDF con formato de ticket
        Font fontTitulo = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);
        Font fontNormal = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);
        Font fontDetalle = new Font(Font.FontFamily.COURIER, 8, Font.NORMAL);

        Paragraph titulo = new Paragraph("\n--- COMPROBANTE DE DEPÓSITO ---\n", fontTitulo);
        titulo.setAlignment(Element.ALIGN_CENTER);
        documento.add(titulo);

        documento.add(new Paragraph("\n===================================", fontDetalle));
        documento.add(new Paragraph("Cantidad: \n$ " + txtCantidad.getText(), fontNormal));
        documento.add(new Paragraph("Correo: \n" + txtCorreo.getText(), fontNormal));
        documento.add(new Paragraph("Descripción: \n" + txtDescripcion.getText(), fontNormal));
        documento.add(new Paragraph("===================================\n", fontDetalle));

        Paragraph mensaje = new Paragraph("Gracias por su confianza.\n", fontNormal);
        mensaje.setAlignment(Element.ALIGN_CENTER);
        documento.add(mensaje);

        documento.add(new Paragraph("\nFecha: " + java.time.LocalDateTime.now(), fontDetalle));

        // Mostrar mensaje de confirmación
        JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                "PDF generado con éxito en: " + ruta);

        // Abrir el archivo PDF automáticamente
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().open(new File(ruta));
            } else {
                JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                        "No se pudo abrir el archivo automáticamente. Revise: " + ruta);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                    "Error al abrir el archivo: " + e.getMessage());
        }

    } catch (DocumentException | IOException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this),
                "Error al generar el PDF: " + ex.getMessage());
    } finally {
        // Cerrar el documento correctamente
        if (documento.isOpen()) {
            documento.close();
        }
    }
}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel label;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNumeroCuenta;
    // End of variables declaration//GEN-END:variables
}
